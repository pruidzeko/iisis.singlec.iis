	iis.singlec - фрейворк для разработки приложений на базе 1С 8.x. с открытым исходным кодом

Фрейворк написан на ангийском языке. Выбор определен тем, что при реализации крупних приложений на других языках(Н-р: Java, реализация кода на англ)
для совместного использования с фреймворком появляется сложность в чтении одинаковых сущностей(Н-р в 1с - мы разработали объект с названием ПрофилиПодключения, 
а на Java ConnectionProfile - это просто не удобно).	
	
	Приемущества:
1. Абстрагирование от конкретной платформы 1с 8.x 
Обычные и управляемые формы объедены в одну сущность. Реализация форм происходит с использованием xml файлов. В них описывается структура
формы, положения контролов и реализация событий контролов и взаимодействие между ними. Это позволяет уменьшить связанность контрола на уровне его
программной реализации с другими контролами. Другими словами один контрол ничего не знает о других контролах, связь происходит в xml файле.

2.Абстрагирование от конкретных конфигураций(т.е. от их сущностей и структуры метаданных) с помощью реализации собственной структуры данных на базе xml схем, 
которая в последствии адаптируется для каждой конфигурации отдельно с исплозованием классов-адаптеров.

3. Структура фрейворка приближает разработку приложений на 1С к ООП. 

Фреймворк позволяет реализовать универсальные хранилища для данных в виде организованных списков с однородными данными или же в виде универсального
хранилища любой информации.Хранилище можно реализовать как в 1с(Н-р в управлении торговлей есть регистр с настройками), в файловом варианте
или в любой из баз данных, написав под нее драйвер управления.На текущий момент драйвер управления реализован для БД MySQL.


Фрейворк уже содержит классы, позволяющие упростить разработку, есть классы, которые расширяют функционал типовых классов 1с(Н-р: ТаблицаЗначений, Массив)


**********************Архитектура фрейворка**********************
Основные классы:
iis.builder - инициализирует фреймворк и содержите в себе таблицу подгруженных классов
iis.beans - инициализирует beans.xml и дает доступ классам к настрокам, описанным в xml документе.

iis.scope - хранилище как оперативных данных, так и данных из источников. Каждый класс может иметь временные данные, которые находятся в общем хранилище.
Но по умолчанию хранилища инициализируются только для тех классов, которые имеют настройки в beans.xml
iis.xsd - класс работы с XDTO Объектами. Фреймворк тесно работает с xml схемами и построенными на их основании xml документами.


Инициализия фреймворка:
Инициализацией фреймворка занимается класс iis.builder у которого есть метод Init, принимающий в качестве параметров:
	- путь к файлу beans.xml;
	- путь к файлу xsdLoader.xsd;
	- список приложений, которые необходимо подключить для работы.
	
**********************Классы**********************

Class - это отдельная обработка с расширением epf. Каждый класс является singleton(одиночкой).Создается только один экземпляр при подгрузке класса.

У класса есть поля и методы. 

Методы деляться на 2 типа - public и private. Это позволяет инкапсулировать(спрятать) внутренние классы и закрыть к ним доступ из других классов. 
	
	Предопределенные методы классов:
		1. Init - вызывается один раз при подгрузке класса классом iis.builder;
		2. Command - описывает в себе те методы, которые открыты(public) для доступа другим классам, все остальные методы класса являются закрытыми(private)
		3. CC - Необходим для доступа текущего класса к другим классам. 
	
Подгрузка классов является ленивой, т.е. он подгружается только в том случае, если к его методу обращаются.

Для обращения к методу класса используется запись вида: CC([ИмяПроекта].[РасположениеКласса], [ИмяМетода], [Параметр1], [Параметр2] и т.д);

Например фактическое расположение класса: c:\iisis\projects\singlec\iis\components\scope\db\fileSystem\objectList.epf будет иметь вид
iis.scope.db.fileSystem.objectList

**********************iis.beans**********************
Дополнительные настройки каждого класса можно описывать в xml файле(beans.xml), Н-р класс работает с веб-сервисом у которого есть URL адрес
URL адрес может измениться и для того, что бы не вшивать его в код можно описать его в xml настройках и обращаться к этим настройкам уже в самом классе.
В каждый bean(это одтельная настройка для конкретного класса) можно вкладывать вложенные bean, тем самым организовать иерархию bean подобную 
иерархии классов.

beans.xml подгружается фреймворком один раз при инициализации.

**********************iis.db**********************
Отличительная особенность работы фрейворка заключается в том, что он заложил в себе понятие универсального источника данных(класс db). 
При реализации программ нам приходится часто обращаться к таким источникам, как http ресурс, email, базы данных, файлы(в том числе и архивы, Excel).
Но в итоге каждый из источников имеет ряд схожих черт - CRUD (https://ru.wikipedia.org/wiki/CRUD).
Для кадого источник данных описывается свой драйвер с которым уже непосредственно работают другие классы.

Правила взаимодействия с драйверами описывается с помощью универсального механизма ObjectListOptions. Например из источника базы данных MySQL
необходимо получить список записей. Мы не пишем прямой SQL запрос, а просто заполняем ObjectListOptions, на основании которого происходит формирование
запроса.Другой пример: с почты нам нужно получить конкретные почтовые сообщения - в этом случае мы не устанавливаем сами фильтры для внутреннего объекта
1с, работающий с почтой, а передаем драйверу ObjectListOptions, который уже преобразуется в фильтры и делает запрос.
С помощью ObjectListOptions мы можем обращаться к любому источнику данных не задумываясь о его специфики.